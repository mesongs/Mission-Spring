<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="receipt.receiptDAO">
	
	<resultMap type="receiptVO" id="receiptMap">
		<result column="receipt_no" property="receiptNo" />
		<result column="SUPPLIER_BUSINESS_NO" property="supplierBusinessNo" />
		<result column="STORE_NAME" property="storeName" />
		<result column="RECEIPT_DATE" property="receiptDate" />
		<result column="REG_DATE" property="regDate" />
		<result column="receipt_name" property="receiptName" />
		<result column="receipt_code" property="receiptCode"/>
		<result column="receipt_status" property="receiptStatus" />
		<result column="business_no" property="businessNo" />
		<result column="file_path" property="filePath" />
		<result column="file_save_name" property="fileSaveName"/>
		<result column="receipt_code" property="receiptCode"/>
		<result column="user_id" property="userId"/>
	</resultMap>
	
	<resultMap type="rejectReceiptVO" id="rejectReceiptMap">
		<result column="reject_reason" property="rejectReason"/>
		<result column="receipt_no" property="receiptNo" />
		<result column="SUPPLIER_BUSINESS_NO" property="supplierBusinessNo" />
		<result column="STORE_NAME" property="storeName" />
		<result column="RECEIPT_DATE" property="receiptDate" />
		<result column="REG_DATE" property="regDate" />
		<result column="receipt_name" property="receiptName" />
		<result column="file_path" property="filePath" />
		<result column="file_save_name" property="fileSaveName"/>
		<result column="receipt_code" property="receiptCode"/>
	</resultMap>
	
	<resultMap type="IntegratedSalesVO" id="IntegratedSalesMap">
		<result column="receipt_code" property="receiptCode"/>
		<result column="store_name" property="supplierStoreName"/>
		<result column="receipt_date" property="receiptDate"/>
		<result column="supplier_business_no" property="supplierBusinessNo"/>
	</resultMap>
	
	<select id="getReceiptNo" resultType="int">
		SELECT RECEIPT_SEQ.NEXTVAL as receiptNo FROM DUAL
	</select>
	
	<insert id="receiptRegister" parameterType="receiptVO">
		insert into TB_RECEIPT(RECEIPT_NO, RECEIPT_CODE, SUPPLIER_BUSINESS_NO, STORE_NAME, RECEIPT_DATE,
                      		  AMOUNT, VAT, PURPOSE, MEMO, BUSINESS_NO)
            		values(#{receiptNo},#{receiptKind}, #{supplierBusinessNo}, 
            				#{storeName}, #{receiptDate}, #{amount}, #{vat}, #{purpose}, #{memo}, #{businessNo})
	</insert>

	<insert id="receiptFileRegister" parameterType="receiptVO">
		insert into tb_receipt_file(RECEIPT_NO, FILE_PATH, FILE_ORIGINAL_NAME, FILE_SAVE_NAME, FILE_SIZE)
            		values(#{receiptNo}, #{filePath}, #{fileOriginalName}, #{fileSaveName}, #{fileSize})
	</insert>
	
	<select id="getSeachWaitLst" parameterType="String" resultType="receiptVO" resultMap="receiptMap">
			select receipt_no, SUPPLIER_BUSINESS_NO, STORE_NAME, RECEIPT_DATE, to_char(REG_DATE, 'yy/mm/dd') as REG_DATE, AMOUNT, vat, MEMO, purpose, receipt_name 
				from TB_RECEIPT a, TB_RECEIPT_KIND b     
				where a.RECEIPT_code = b.RECEIPT_code 
				and receipt_status ='W'
				and memo like '%'||#{searchWord}||'%'
				order by REG_DATE desc
	</select>
	
	<select id="waitAllList" resultType="receiptVO" resultMap="receiptMap">
			select receipt_no, SUPPLIER_BUSINESS_NO, STORE_NAME, RECEIPT_DATE, to_char(REG_DATE, 'yy/mm/dd') as REG_DATE, AMOUNT, vat, MEMO, purpose, receipt_name
			from TB_RECEIPT a, TB_RECEIPT_KIND b     
			where a.RECEIPT_code = b.RECEIPT_code and
			receipt_status ='W'
			order by REG_DATE desc
	</select>
	
	<select id="processedAllList" resultType="receiptVO" resultMap="receiptMap">
			select * from (select receipt_no, SUPPLIER_BUSINESS_NO, STORE_NAME, RECEIPT_DATE, to_char(REG_DATE, 'yy/mm/dd') as REG_DATE,
	        receipt_status,AMOUNT, vat, AMOUNT+VAT AS SUM, MEMO, purpose, receipt_name, overlap
			from TB_RECEIPT a, TB_RECEIPT_KIND b     
			where a.RECEIPT_code = b.RECEIPT_code and
			receipt_status ='P'
			order by RECEIPT_DATE desc) where rownum <![CDATA[ <= ]]> 15
	</select>
	
	<select id="getSeachProcessedList" parameterType="String" resultType="receiptVO" resultMap="receiptMap">
			select receipt_no, SUPPLIER_BUSINESS_NO, STORE_NAME, RECEIPT_DATE, to_char(REG_DATE, 'yy/mm/dd') as REG_DATE,
		    receipt_status,AMOUNT, vat, AMOUNT+VAT AS SUM, MEMO, purpose, receipt_name, overlap
			from TB_RECEIPT a, TB_RECEIPT_KIND b     
			where a.RECEIPT_code = b.RECEIPT_code and
			receipt_status ='P'
			and memo like '%'||#{searchWord}||'%'
			order by RECEIPT_DATE desc
	</select>
	
	<select id="getSeachDateList" parameterType="searchDateVO" resultType="receiptVO" resultMap="receiptMap">
			select receipt_no, SUPPLIER_BUSINESS_NO, STORE_NAME, RECEIPT_DATE, to_char(REG_DATE, 'yy/mm/dd') as REG_DATE,
		    receipt_status,AMOUNT, vat, AMOUNT+VAT AS SUM, MEMO, purpose, receipt_name, overlap
			from TB_RECEIPT a, TB_RECEIPT_KIND b     
			where a.RECEIPT_code = b.RECEIPT_code and
			receipt_status ='P'
            and RECEIPT_DATE between to_date(#{startDate}, 'yyyy-mm-dd') and to_date(#{endDate}, 'yyyy-mm-dd')
			order by RECEIPT_DATE desc
	</select>
	
	<select id="getReceiptKindList" parameterType="String" resultType="receiptVO" resultMap="receiptMap">
			select receipt_no, SUPPLIER_BUSINESS_NO, STORE_NAME, RECEIPT_DATE, to_char(REG_DATE, 'yy/mm/dd') as REG_DATE,
		    receipt_status,AMOUNT, vat, AMOUNT+VAT AS SUM, MEMO, purpose, receipt_name, overlap
			from TB_RECEIPT a, TB_RECEIPT_KIND b     
			where a.RECEIPT_code = b.RECEIPT_code and
			receipt_status ='P'
            <if test="receiptKind != 000">
            	and b.receipt_code = #{receiptKind}
            </if>
            <if test="receiptKind == 000">
            	and b.receipt_code in (001, 002, 003, 004)
            </if>
			order by RECEIPT_DATE desc
	</select>
	
	<select id="getPerReceiptList" parameterType="int" resultType="receiptVO" resultMap="receiptMap">
			select * from (select receipt_no, SUPPLIER_BUSINESS_NO, STORE_NAME, RECEIPT_DATE, to_char(REG_DATE, 'yy/mm/dd') as REG_DATE,
		    receipt_status,AMOUNT, vat, AMOUNT+VAT AS SUM, MEMO, purpose, receipt_name, overlap
			from TB_RECEIPT a, TB_RECEIPT_KIND b     
			where a.RECEIPT_code = b.RECEIPT_code and
			receipt_status ='P'
			order by RECEIPT_DATE desc)
            where rownum <![CDATA[ <= ]]> #{perReceipt}
	</select>
	
	<!-- 영수증 세부사항 조회 -->
	<select id="getReceiptDetail" parameterType="int" resultType="receiptVO" resultMap="receiptMap">
			select a.receipt_no, receipt_code, supplier_business_no, store_name, RECEIPT_DATE, amount, vat, overlap, receipt_status, purpose, file_path,
		        memo, business_no, file_save_name
				from TB_RECEIPT a, TB_RECEIPT_FILE b
				where a.receipt_no = b.receipt_no
				and a.receipt_no = #{receiptNo}
	</select>
	
	<!-- 직원이 확인할 수 있는 처리 대기 목록 -->
	<select id="getMgReceiptList" resultType="receiptVO" resultMap="receiptMap">
			select * from(select c.BUSINESS_NO, c.store_name, c.user_id, c.memo, c.purpose, c.overlap, amount, vat, (amount+vat) as sum,
	       		RECEIPT_DATE, to_char(REG_DATE, 'yyyy-mm-dd') as REG_DATE,
	       		c.receipt_no, d.receipt_name
			from(select a.BUSINESS_NO, a.store_name, b.user_id, a.memo, a.purpose, a.overlap, amount, vat,
				       		RECEIPT_DATE, REG_DATE,
				       		a.receipt_no, a.receipt_code
							from tb_receipt a, tb_BUSINESS b
							where a.BUSINESS_NO = b.BUSINESS_NO and receipt_status = 'W') c, TB_RECEIPT_KIND d
			where c.receipt_code = d.receipt_code
			order by reg_date desc) where rownum <![CDATA[ <= ]]> 15
	</select>
	
	<!-- 직원이 승인 or 반려하는 항목 -->
	<select id="getMgReceiptDetail" parameterType="int" resultType="receiptVO" resultMap="receiptMap">
		 	select receipt_no, receipt_code, supplier_business_no, c.store_name, RECEIPT_DATE, to_char(REG_DATE, 'yy/mm/dd') as REG_DATE
			       ,amount, vat, overlap, receipt_status, purpose, file_path, memo, c.business_no, file_save_name, d.user_id
			from
			(select a.receipt_no, receipt_code, supplier_business_no, store_name, RECEIPT_DATE, amount, reg_date,
			                vat, overlap, receipt_status, purpose, file_path,
					        memo, business_no, file_save_name
							from TB_RECEIPT a, TB_RECEIPT_FILE b
							where a.receipt_no = b.receipt_no
							and a.receipt_no = #{receiptNo}) c, tb_BUSINESS d
			where c.BUSINESS_no = d.BUSINESS_no
	</select>
	
	<!--직원 목록 개수 조회 ajax -->
	<select id="getPerMgReceiptList" parameterType="int" resultType="receiptVO" resultMap="receiptMap">
            select * from (select c.BUSINESS_NO, c.store_name, c.user_id, c.memo, c.purpose, c.overlap, amount, vat, (amount+vat) as sum,
	       		RECEIPT_DATE, to_char(REG_DATE, 'yy/mm/dd') as REG_DATE,
	       		c.receipt_no, d.receipt_name
				from(select a.BUSINESS_NO, a.store_name, b.user_id, a.memo, a.purpose, a.overlap, amount, vat,
					       		RECEIPT_DATE, REG_DATE,
					       		a.receipt_no, a.receipt_code
								from tb_receipt a, tb_BUSINESS b
								where a.BUSINESS_NO = b.BUSINESS_NO and receipt_status = 'W') c, TB_RECEIPT_KIND d
				where c.receipt_code = d.receipt_code
				order by reg_date desc) where rownum <![CDATA[ <= ]]> #{perReceipt}
	</select>
	
	<update id="acceptUpdate" parameterType="acceptRejectVO">
		update TB_RECEIPT set receipt_status ='P' where receipt_no = #{receiptNo}
	</update>
	
	<update id="rejectUpdate" parameterType="acceptRejectVO">
		update TB_RECEIPT set receipt_status ='R', reject_reason= #{rejectReason} where receipt_no = #{receiptNo}
	</update>
	
	<!-- 회원 - 반려된 영수증 목록 -->
	<select id="rejectReceiptList" resultType="rejectReceiptVO" resultMap="rejectReceiptMap">
		select * from (select receipt_no, SUPPLIER_BUSINESS_NO, STORE_NAME, RECEIPT_DATE, to_char(REG_DATE, 'yy/mm/dd') as REG_DATE,
	        receipt_status,AMOUNT, vat, AMOUNT+VAT AS SUM, MEMO, purpose, receipt_name, overlap, reject_reason
			from TB_RECEIPT a, TB_RECEIPT_KIND b     
			where a.RECEIPT_code = b.RECEIPT_code and
			receipt_status ='R'
			order by RECEIPT_DATE desc) where rownum <![CDATA[ <= ]]> 15
	</select>
	
	<!-- 회원 - 반려된 영수증 세부사항 -->
	<select id="rejectReceiptDetail" resultType="rejectReceiptVO" parameterType="int" resultMap="rejectReceiptMap">
		select a.receipt_no, receipt_code, supplier_business_no, store_name, RECEIPT_DATE, amount, vat, overlap, receipt_status, purpose, file_path,
		        memo, business_no, file_save_name, reject_reason						
				from TB_RECEIPT a, TB_RECEIPT_FILE b
				where a.receipt_no = b.receipt_no
				and a.receipt_no = #{receiptNo}
	</select>
	
	<!--회원 -반려된 영수증 세부사항에서 재등록(내용을 변경해서 업데이트할 수 있음, 사진 오류면 다시 찍어야함)  -->
	<update id="reRegisterReject" parameterType="rejectReceiptVO">
		update TB_RECEIPT set receipt_code = #{receiptKind}, store_name= #{storeName}, amount= #{amount} , vat = #{vat}, purpose= #{purpose},
		 			   supplier_Business_No=#{supplierBusinessNo}, receipt_Date=#{receiptDate}, memo=#{memo},
                       overlap=#{overlap}, reject_reason='-', receipt_status ='W' where RECEIPT_NO = #{receiptNo}
	</update>
	
	<!-- 통합 매입내역 조회, 체크값 + 입력된 날짜 -->
	<!-- and memo like '%'||#{searchWord}||'%' -->  
	<!-- 동적쿼리 in 동적으로 추가 --><!-- WHERE COLUMN_NAME LIKE '%'||#searchKeyword#||'%' -->
	
	<select id="getIntegratedList" parameterType="integratedSalesVO" resultType="integratedSalesVO" resultMap="IntegratedSalesMap">
			select * from(select decode(receipt_code, '001','세금계산서','002','계산서','003','카드영수증','004','간이영수증','005','현금영수증') as RECEIPT_CODE, STORE_NAME, amount, vat, amount+vat as calSum, receipt_date, SUPPLIER_BUSINESS_NO, division
			from tb_receipt where BUSINESS_NO=#{businessNo} and receipt_status='P' and receipt_date like #{purchaseDate}||'%' and receipt_code in
			<foreach collection="sendArray" item="item" index="index" open="(" close=")" separator=",">
            	${item}
        	</foreach>
			union
			select decode(receipt_code, '001','세금계산서','002','계산서','003','카드영수증','004','간이영수증','005','현금영수증') as RECEIPT_CODE, store_name, amount, vat,amount+vat as calSum, receipt_date, SUPPLIER_BUSINESS_NO, division
			from TB_PURCHASE where BUSINESS_NO=#{businessNo} and receipt_date like #{purchaseDate}||'%' and receipt_code in
			<foreach collection="sendArray" item="item" index="index" open="(" close=")" separator=",">
            	${item}
        	</foreach>
        	) where rownum <![CDATA[ <= ]]> 20
	</select>
</mapper>